// Generated by CoffeeScript 1.7.1
(function() {
  var $, bind, concat, directions, svg, transformWith, unit, unwrap, _,
    __slice = [].slice;

  _ = require('underscore');

  exports.$ = $ = {};

  transformWith = function(f) {
    return function(val) {
      return function(x) {
        if (x === $) {
          return val;
        } else {
          return f(x);
        }
      };
    };
  };

  unit = transformWith(_.identity);

  bind = function($val) {
    return function(transform) {
      return transform($val($));
    };
  };

  concat = function(list) {
    return (bind(unit(list)))(transformWith(function($list) {
      var first, initial, last, rest, types, xs, ys, _i, _ref, _ref1;
      initial = 2 <= list.length ? __slice.call(list, 0, _i = list.length - 1) : (_i = 0, []), last = list[_i++];
      _ref = $list($), first = _ref[0], rest = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      _ref1 = _.zip(last, first), xs = _ref1[0], ys = _ref1[1], types = _ref1[2];
      if (_.every(types, _.partial(_.isEqual, 'move'))) {
        return concat(__slice.call(initial).concat([[xs[0] + xs[1], ys[0] + ys[1], 'move']], __slice.call(rest)));
      } else {
        return concat(__slice.call(initial).concat([last], [first], __slice.call(rest)));
      }
    }));
  };

  directions = {
    U: function(n) {
      return [0, -n];
    },
    D: function(n) {
      return [0, n];
    },
    L: function(n) {
      return [-n, 0];
    },
    R: function(n) {
      return [n, 0];
    }
  };

  _.each(directions, function(f, chr) {
    exports[chr.toLowerCase()] = function(n) {
      return concat([__slice.call(f(n)).concat(['move'])]);
    };
    return exports[chr.toUpperCase()] = function(n) {
      return concat([__slice.call(f(n)).concat(['line'])]);
    };
  });

  exports.extend = function(o) {
    return _.each(directions, function(f, chr) {
      o[chr.toLowerCase()] = exports[chr.toLowerCase()];
      return o[chr.toUpperCase()] = exports[chr.toUpperCase()];
    });
  };

  unwrap = function(f) {
    return function() {
      var args, path;
      path = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return f.apply(null, [(_.isFunction(path) ? path($) : path)].concat(__slice.call(args)));
    };
  };

  exports.bounds = unwrap(function(path, scale) {
    var xs, ys, _ref;
    if (scale == null) {
      scale = 1;
    }
    _ref = _.reduce(path, function(_arg, _arg1) {
      var dx, dy, x0, x1, xs, y0, y1, ys;
      xs = _arg[0], ys = _arg[1], x0 = _arg[2], y0 = _arg[3];
      dx = _arg1[0], dy = _arg1[1];
      return [__slice.call(xs).concat([x1 = x0 + dx]), __slice.call(ys).concat([y1 = y0 + dy]), x1, y1];
    }, [[0], [0], 0, 0]), xs = _ref[0], ys = _ref[1];
    return _.map([_.min(xs), _.min(ys), _.max(xs), _.max(ys)], function(n) {
      return n * scale;
    });
  });

  svg = unwrap(function(path, scale) {
    if (scale == null) {
      scale = 1;
    }
    return (_.map(path, function(_arg) {
      var t, x, y;
      x = _arg[0], y = _arg[1], t = _arg[2];
      return "" + t[0] + " " + ([x, y].map(function(n) {
        return (n * scale).toFixed();
      }).join(','));
    })).join(' ');
  });

  exports.formatters = {
    svg: svg
  };

}).call(this);
